---
- name: Loki
  tags: ["loki"]
  vars:
    LOKI_DATA_DIR: "{{ DATA_DIR }}/loki"
    LOKI_STATIC_DIR: "{{ STATIC_DIR }}/loki"
    LOKI_CREDS_FILE: "{{ LOKI_STATIC_DIR }}/creds.env"
  block:
    - name: Create Loki network
      docker_network:
        name: loki

    - name: Create Loki data directory
      file:
        path: "{{ LOKI_DATA_DIR }}"
        state: directory
        owner: 10001
        group: 10001
        mode: "0755"

    - name: Create Loki config directory
      file:
        path: "{{ LOKI_STATIC_DIR }}"
        state: directory
        owner: 10001
        group: 10001
        mode: "0755"

    - name: Deploy Loki config
      template:
        src: loki-config.yaml.j2
        dest: "{{ LOKI_STATIC_DIR }}/local-config.yaml"
        owner: 10001
        group: 10001
        mode: "0644"
      register: loki_config_result

    - name: Add Loki container
      docker_container:
        name: loki
        image: grafana/loki:latest
        state: started
        restart_policy: unless-stopped
        networks:
          - name: loki
          - name: traefik
        published_ports:
          - "127.0.0.1:3100:3100"
        command: -config.file=/etc/loki/local-config.yaml
        volumes:
          - "{{ LOKI_DATA_DIR }}:/loki"
          - "{{ LOKI_STATIC_DIR }}/local-config.yaml:/etc/loki/local-config.yaml"
        labels:
          traefik.enable: "true"
          traefik.http.routers.loki.rule: "Host(`loki.{{ BACKEND_DOMAIN }}`)"
          traefik.http.routers.loki.entrypoints: "apisecure"
          traefik.http.services.loki.loadbalancer.server.port: "3100"
          traefik.http.middlewares.loki-auth.basicauth.users: "{{ LOKI_USER }}:{{ LOKI_PASS }}"
          traefik.http.middlewares.loki-auth.basicauth.removeheader: "true"
          traefik.http.routers.Loki.middlewares: "loki-auth@docker"
          alloy.scrape: "true"
          alloy.job: "loki"
          alloy.port: "3100"
      register: loki_container_result

    - name: Restart Loki if config changed but container did not
      docker_container:
        name: loki
        restart: true
      when: loki_config_result.changed and not loki_container_result.changed
